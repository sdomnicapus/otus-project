"""
Django settings for service project.

Generated by 'django-admin startproject' using Django 2.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import json
import os
import sys

from django.utils.translation import gettext_lazy as _
from core.utils import init_conf
from service.suit_config import CUSTOM_SUIT_CONFIG

import logging
import datetime
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import LoggingIntegration
from sentry_sdk.integrations.redis import RedisIntegration
from sentry_sdk.integrations.sqlalchemy import SqlalchemyIntegration
from sentry_sdk.hub import Hub
from sentry_sdk.utils import (
    to_string,
    event_from_exception,
    current_stacktrace,
    capture_internal_exceptions,
)
from sentry_sdk.integrations import Integration
from sentry_sdk._compat import iteritems
from sentry_sdk._types import MYPY
if MYPY:
    from logging import LogRecord
    from typing import Any
    from typing import Dict
    from typing import Optional


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '+et4di%a22)p%(ij$^^6(@!c)t(yc+4%t%2z+8ep@$rn0^ku^x'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

TESTING = sys.argv[1:2] == ['test']
SHELL = sys.argv[1:2] == ['shell']
COMMANDS = sys.argv[0:1] == ['manage.py'] and sys.argv[1:2] != ['runserver']
NORELOAD = '--noreload' in sys.argv
MAIN = True
DJANGO_GUNICORN = os.environ.get('DJANGO_GUNICORN') == 'true'
if not NORELOAD and DEBUG:
    MAIN = os.environ.get('RUN_MAIN') == 'true'
if DJANGO_GUNICORN:
    MAIN = True
if COMMANDS:
    MAIN = False
if TESTING or SHELL:
    MAIN = False

ALLOWED_HOSTS = ['*']

# Environs

if DEBUG:
    init_conf(BASE_DIR)
    with open(os.path.join(BASE_DIR, 'conf.json'), 'r') as f:
        conf = json.load(f)
else:
    conf = os.environ

DATABASE_NAME = conf.get('DATABASE_NAME')
DATABASE_USER = conf.get('DATABASE_USER')
DATABASE_PASSWORD = conf.get('DATABASE_PASSWORD')
DATABASE_HOST = conf.get('DATABASE_HOST')
DATABASE_PORT = conf.get('DATABASE_PORT')

LOG_DATABASE_NAME = conf.get('LOG_DATABASE_NAME')
LOG_DATABASE_USER = conf.get('LOG_DATABASE_USER')
LOG_DATABASE_PASSWORD = conf.get('LOG_DATABASE_PASSWORD')
LOG_DATABASE_HOST = conf.get('LOG_DATABASE_HOST')
LOG_DATABASE_PORT = conf.get('LOG_DATABASE_PORT')

REDIS_HOST = conf.get('REDIS_HOST')
REDIS_PORT = conf.get('REDIS_PORT')

AMQP_USER = conf.get('AMQP_USER')
AMQP_PASSWORD = conf.get('AMQP_PASSWORD')
AMQP_HOST = conf.get('AMQP_HOST')
AMQP_PORT = conf.get('AMQP_PORT')
AMQP_PLUGIN_HOST = conf.get('AMQP_PLUGIN_HOST')
AMQP_PLUGIN_PORT = conf.get('AMQP_PLUGIN_PORT')

WS_HOST = conf.get('WS_HOST', '0.0.0.0')
WS_PORT = conf.get('WS_PORT', 6789)

CIPHER_KEY = conf.get('CIPHER_KEY')
SERVER_HOST = conf.get('SERVER_HOST', '127.0.0.1:8000')

LOG_LEVEL = conf.get('LOG_LEVEL', 'DEBUG' if DEBUG else 'INFO')
LOG_FILE_LEVEL = conf.get('LOG_FILE_LEVEL', 'DEBUG' if DEBUG else 'INFO')

TRANSPORT_TYPE_WS = 'ws'
TRANSPORT_TYPE_RMQ = 'rmq'
TRANSPORT_TYPE = conf.get('TRANSPORT_TYPE', TRANSPORT_TYPE_RMQ)  # rmq | ws

LANGUAGE_CODE_UA = 'uk'
LANGUAGE_CODE_EN = 'en'
LANGUAGE_CODE_RU = 'ru'
LANGUAGE_CODE = conf.get('LANGUAGE_CODE') or LANGUAGE_CODE_UA  # uk | en-us | ru-ru

DNS = conf.get('DNS', '')

EMAIL_HOST = conf.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_HOST_USER = conf.get('EMAIL_HOST_USER', 'alert@otus-projectampus.io')
EMAIL_HOST_PASSWORD = conf.get('EMAIL_HOST_PASSWORD', 'h8%QW=7Z')
EMAIL_PORT = conf.get('EMAIL_PORT', 587)
EMAIL_USE_TLS = conf.get('EMAIL_USE_TLS', True)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
DEFAULT_FROM_EMAIL = conf.get('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER)

TELEGRAM_BOT_TOKEN = conf.get('TELEGRAM_BOT_TOKEN', '656685552:AAHh2tj4XIwu1Gh4ieK5BV_CI6CKVX9xqC4')
USERECHO_SSO_KEY = conf.get('USERECHO_SSO_KEY', '94L0gnjZBdN4wuqbKPUOW2rzfqeCAKc2')

# FCM

FCM_NOTIFICATION_URL = 'https://fcm.googleapis.com/fcm/send'

if TESTING:
    LOG_LEVEL = 'INFO'

INTERNAL_SERVICE_TOKEN = '93fec3798635a020ff44a3ad59a68fe689d09083a3d206889180a26300108174'

# Application definition

INSTALLED_APPS = [
    # 'suit_dashboard',
    'suitlocale',
    'suit',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.forms',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_swagger',
    'corsheaders',
    'core',
    'journal',
    'server',
    'worker',
    'django_json_widget',
    'rangefilter',
    'django_filters',
    'django_tables2',
    'crispy_forms',
    'bootstrap_datepicker_plus',
    'django_select2',
    'date_range_filter',
    'fontawesome_5',
    'django_bootstrap_breadcrumbs'
]

if TRANSPORT_TYPE == TRANSPORT_TYPE_RMQ:
    if not TESTING and not SHELL:
        INSTALLED_APPS.append('rmq')

MIDDLEWARE = [
    # 'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.middlewares.sessions.AppSessionMiddleware',
    # 'django_prometheus.middleware.PrometheusAfterMiddleware',
]

ROOT_URLCONF = 'service.urls'

# prom export
# PROMETHEUS_METRICS_EXPORT_PORT = 8001
# PROMETHEUS_METRICS_EXPORT_ADDRESS = ''


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'frontend/templates'),
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.core'
            ],
        },
    },
]

FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'

WSGI_APPLICATION = 'service.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': DATABASE_NAME,
        'USER': DATABASE_USER,
        'PASSWORD': DATABASE_PASSWORD,
        'HOST': DATABASE_HOST,
        'PORT': DATABASE_PORT or '5432',
        'CONN_MAX_AGE': 0
    },
    'journal': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': LOG_DATABASE_NAME,
        'USER': LOG_DATABASE_USER,
        'PASSWORD': LOG_DATABASE_PASSWORD,
        'HOST': LOG_DATABASE_HOST,
        'PORT': LOG_DATABASE_PORT or '5432',
        'CONN_MAX_AGE': 0
    }
}

DATABASE_ROUTERS = ['service.db_route.Router']

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]

TIME_ZONE = conf.get('TIME_ZONE') or 'Europe/Kiev'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'www', 'static')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder'
)

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# User model

AUTH_USER_MODEL = 'core.User'
USER_MODEL = AUTH_USER_MODEL

ADMIN_SITE_HEADER = 'otus-project Cube Core'
ADMIN_SITE_TITLE = ADMIN_SITE_HEADER

# Rest framework

CORS_ORIGIN_ALLOW_ALL = True

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
        # 'rest_framework.permissions.DjangoModelPermissions',
        # 'rest_framework.permissions.IsAdminUser',
        # 'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication'
    ],

    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
}

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
)

LOGIN_URL = '/login/'

# 2.5MB - 2621440
# 5MB - 5242880
# 10MB - 10485760
# 20MB - 20971520
# 50MB - 52428800
# 100MB - 104857600
# 250MB - 214958080
# 500MB - 429916160

MAX_UPLOAD_SIZE = 52428800
FILE_UPLOAD_PERMISSIONS = 0o644

ROOT_USER_EMAIL = 'root@otus-project.solutions'

# Api version

API_VERSION = '2.0.0'

KERNEL_VERSION = '1.1.2'

# SUIT ADMIN THEME

SUIT_CONFIG = CUSTOM_SUIT_CONFIG

# crispy config

CRISPY_TEMPLATE_PACK = 'bootstrap4'

# Debug toolbar

if DEBUG:
    INSTALLED_APPS.append('debug_toolbar')

    MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')

    INTERNAL_IPS = ['127.0.0.1']

    DEBUG_TOOLBAR_PANELS = [
        'debug_toolbar.panels.versions.VersionsPanel',
        'debug_toolbar.panels.timer.TimerPanel',
        'debug_toolbar.panels.settings.SettingsPanel',
        'debug_toolbar.panels.headers.HeadersPanel',
        'debug_toolbar.panels.request.RequestPanel',
        'debug_toolbar.panels.sql.SQLPanel',
        'debug_toolbar.panels.staticfiles.StaticFilesPanel',
        'debug_toolbar.panels.templates.TemplatesPanel',
        'debug_toolbar.panels.cache.CachePanel',
        'debug_toolbar.panels.signals.SignalsPanel',
        'debug_toolbar.panels.logging.LoggingPanel',
        'debug_toolbar.panels.redirects.RedirectsPanel',
    ]

# Swagger settings

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization'
        }
    }
}


# Sentry
sentry_logging = LoggingIntegration(
    level=logging.INFO,        # Capture info and above as breadcrumbs
    event_level=logging.WARNING  # Send errors as events
)

sentry_sdk.init(
    dsn="http://22ffe7ec8f4b418098c80c07e0ab8e7e@static.otus-project.solutions:9000/3",
    traces_sample_rate = 0.25,
    _experiments={"auto_enabling_integrations": True},
    integrations=[sentry_logging,SqlalchemyIntegration(),RedisIntegration(),DjangoIntegration()],
    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True
)


# Logging

if not os.path.exists(os.path.join(BASE_DIR, 'logs')):
    os.makedirs(os.path.join(BASE_DIR, 'logs'))

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue'
        }
    },
    'formatters': {
        'main_formatter': {
            'format': '[%(asctime)s.%(msecs)03d] [%(levelname)s] | %(name)s: %(lineno)d | %(message)s',
            'datefmt': '%d-%m-%Y %H:%M:%S'
        },
        'generic': {
            'format': '[%(levelname)s] [%(name)s]: %(message)s'
        }
    },
    'handlers': {
        'sentry': {
            'class': 'sentry_sdk.integrations.logging.SentryHandler',
            'formatter': 'generic',
            'level': 'WARNING',
        },
        'console': {
            'level': 'INFO',
            'formatter': 'main_formatter',
            'class': 'logging.StreamHandler'
        },
        'logfile': {
            'level': 'INFO',
            'formatter': 'main_formatter',
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 50,
            'backupCount': 20,
            'filename': 'logs/app.log'
        }
    },
    'loggers': {
        'app': {
            'handlers': ['sentry', 'console', 'logfile'],
            'level': 'WARNING',
            'propagate': False,
        },
        'gunicorn.access': {
            'handlers': ['sentry', 'console', 'logfile'],
            'level': 'WARNING',
            'propagate': False,
        },
        'gunicorn.error': {
            'handlers': ['sentry', 'console', 'logfile'],
            'level': 'WARNING',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['sentry', 'console', 'logfile'],
            'level': 'WARNING',
            'propagate': False,
        },
        'pika': {
            'handlers': ['sentry', 'console', 'logfile'],
            'level': 'WARNING',
            'propagate': False
        },
        '': {
            'handlers': ['console', 'logfile'],
            'level': 'INFO'
        }
    }
}
if TESTING:
    LOGGING['handlers']['logfile'] = {'class': 'logging.NullHandler'}

